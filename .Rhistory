}
x <- matrix(c(16,4.5,4.5,9),ncol=2)
corr_mat(x)
#Task4
lcg <- function(n,a,M,c,z){
for (i in 1:n){
z <-(a*z + c)%%M
x <- z/M^2
random <- c(random,x)
}
}
#Task4
lcg <- function(n,a,M,c,z){
for (i in 1:n){
z <-(a*z + c)%%M
x <- z/M^2
random <- c(random,x)
}
return(random)
}
lcg(10, (2**16)+3, 2^31, 0,1)
#Task4
lcg <- function(n,a,M,c,z){
vector <- c()
for (i in 1:n){
z <-(a*z + c)%%M
x <- z/M^2
random <- c(random,x)
}
return(random)
}
lcg(10, (2**16)+3, 2^31, 0,1)
numeric(2)
#Task4
lcg <- function(n,a=2^16+3,M=2^31,c=0,z=1){
x <- numeric(n)
for (i in 1:n){
z <-(a*z + c)%%M
x[i] <- z/M^2
}
return(x)
}
lcg(10)
runif (2)
x,y <-1,2
return(1,2)
return(c(1,2))
return(1
)
#b
polar.marsaglia <- function(){
while (s > 1){
u1 <- runif(1,-1,1)
u2 <- runif(1,-1,1)
s <- (u1^2)+(u2^2)
}
phi <- sqrt((-2*log(s))/s)
z1 <- phi*u1
z2 <- phi*u2
return(c(z1,z2))
}
box.muller()
#Task 5
#a
ox.muller <- function(){
u1 <- runif(1)
u2 <- runif(1)
theata <- 2*pi*u1
r <- sqrt(-2*log(u2))
z1 <- r*sin(theata)
z2 <- r*cos(theata)
return(c(z1,z2))
}
box.muller()
#Task 5
#a
box.muller <- function(){
u1 <- runif(1)
u2 <- runif(1)
theata <- 2*pi*u1
r <- sqrt(-2*log(u2))
z1 <- r*sin(theata)
z2 <- r*cos(theata)
return(c(z1,z2))
}
box.muller()
print(my.money)
?stop
x <- -2
if (x < 0) {
stop("x不能为负数")
}
#Lab 7
#Task 1
A <- cbind(c(1,8,5),c(4,3,6))
View(A)
#Lab 7
#Task 1
A <- rbind(c(1,8,5),c(4,3,6))
apply(A,2,sum)
#column sum together
apply(A,1,sum)
#行加在一起了
sweep(A, 2, c(1, 3, 5), "-")
#行减了1,3,5
sweep(A, 1, c(8, 6), "/")
？apply
?apply
library(MASS)
crabs <- crabs
View(crabs)
View(crabs)
#Task2
data <- subset(data, c("FL,RW,CL,CW"))
#Task2
data <- subset(data, FL,RW,CL,CW)
#Task2
data <- subset(data, data$FL,data$RW,data$CL,data$CW)
?sunset
?subset
#Task2
data <- subset(data, select=c(FL,RW,CL,CW,BD))
#Task2
data <- subset(crabs, select=c(FL,RW,CL,CW,BD))
?subset
?apply
?trim
set.seed(4032021)
temp = round(runif(10, 0, 20),1)
h = function(x,y) {mean(x) > y}
vapply(temp,h,c(0,1),y=15)
vapply(temp,h,numeric(1),y=15)
vapply(temp,h,numeric(2),y=15)
vapply(temp,h,0,y=15)
vapply(temp,h,1,y=15)
vapply(temp,h,5,y=15)
？vapply
?vapply
thres = seq(180, 200)
thres
?data.frame
spending <- c(5, 4, 12, 7, 3, -12, 14, 11, 6, -2, 8, -1, 10, 17,-9)
boxplot(spending)
summary(spending)
median(spending)
quantile(spending)
## A wilcoxon signed ranks test can be carried out using the following command
## to test the null hypothesis that the median difference is 0.
wilcox.test(spending, mu=0)
spending <- c(5, 4, 12, 7, 3, -12, 14, 11, 6, -2, 8, -1, 10, 17,-9)
## A wilcoxon signed ranks test can be carried out using the following command
## to test the null hypothesis that the median difference is 0.
wilcox.test(spending, mu=0)
## A wilcoxon signed ranks test can be carried out using the following command
## to test the null hypothesis that the median difference is 0.
wilcox.test(spending, mu=0,alternative = "two.sided")
## A wilcoxon signed ranks test can be carried out using the following command
## to test the null hypothesis that the median difference is 0.
wilcox.test(spending, mu=0,alternative = "less")
?wilcox.test
## A wilcoxon signed ranks test can be carried out using the following command
## to test the null hypothesis that the median difference is 0.
wilcox.test(spending,alternative = "two,sided")
## A wilcoxon signed ranks test can be carried out using the following command
## to test the null hypothesis that the median difference is 0.
wilcox.test(spending,alternative = "two.sided")
## A wilcoxon signed ranks test can be carried out using the following command
## to test the null hypothesis that the median difference is 0.
wilcox.test(spending,mu=0,alternative = "two.sided")
#3.2
sway <- c(19, 30, 20, 19, 29, 25, 21, 24, 25, 21, 17, 15, 14, 14, 22, 17)
group <- c(rep("E",8),rep("Y",8))
boxplot(sway,group)
boxplot(sway)
boxplot(group)
a <- c(sway,group)
boxplot(a$group=="E")
a <- c(sway,group)
boxplot(a$group=="E")
a <- matrix(c(sway,group), ncol=2)
View(a)
by(a,a$group,boxplot)
a <- matrix(c(sway,group), ncol=2)
by(a,a$group,boxplot)
by(a,group,boxplot)
?boxplot
by(a, subset=c("E","Y"))
data <- list("E"=subset(a,group=="E"),"Y"=subset(a,group=="Y"))
boxplot(data)
View(data)
data[["E"]]
data <- list("E"=subset(a,group=="E")[1],"Y"=subset(a,group=="Y")[1])
View(data)
data <- list("E"=subset(a,group=="E")[,1],"Y"=subset(a,group=="Y")[,1])
boxplot(data)
View(data)
data[["E"]]
boxplot(as.numrical(data))
boxplot(as.numeric(data))
data <- matrix(subset(a,group=="E")[,1],"Y"=subset(a,group=="Y")[,1])
data <- matrix(c(subset(a,group=="E")[,1],"Y"=subset(a,group=="Y")[,1]),ncol = 2)
boxplot(data)
boxplot(data.frame(data))
boxplot(data$V1)
data$V1
boxplot(data[,1])
data <- as.data.frame(data)
View(data)
View(a)
View(crabs)
data <- as.numeric(data)
a <- matrix(c(sway,group), ncol=2)
#3.2
sway <- c(19, 30, 20, 19, 29, 25, 21, 24, 25, 21, 17, 15, 14, 14, 22, 17)
group <- c(rep("E",8),rep("Y",8))
bxoplot(sway~group)
#3.2
sway <- c(19, 30, 20, 19, 29, 25, 21, 24, 25, 21, 17, 15, 14, 14, 22, 17)
group <- c(rep("E",8),rep("Y",8))
boxplot(sway~group)
?rexp
phi <- rexp(100000,1)
phi <- c(1:100000)
phi
print(phi[97500])
print(phi[97500])
theta <- rexp(100000,1)
phi <- c(1:100000)
for i in phi:
for (i in phi){
phi[i] <- sqrt(theta[i])*log(theta[i])/(1+theta[i])
}
phi
exp <- mean(phi)
var <- var(phi)
exp
vr
var
postive <- 0
for i in phi{
for (i in phi){
if (phi[i]>0){
postive+1
}}
theta <- rexp(100000,1)
phi <- c(1:100000)
for (i in c(1:100000)){
phi[i] <- sqrt(theta[i])*log(theta[i])/(1+theta[i])
}
exp <- mean(phi)
var <- var(phi)
postive <- 0
for (i in phi){
if (i>0){
postive+1
}}
prob <- postive/100000
print(phi[2500])
print(phi[97500])
prob
for (i in c(1:100000)){
if (phi[i]>0){
postive+1
}}
prob <- postive/100000
prob
for (i in c(1:100000)){
if (phi[i]>0){
postive <- postive+1
}}
prob <- postive/100000
prob
sort <- sort(phi)
print(sort[2500])
print(sort[97500])
plot(c(1:100000),sort)
length(sort)
theta <- rexp(100000,1)
phi <- c(1:100000)
for (i in c(1:100000)){
phi[i] <- sqrt(theta[i])*log(theta[i])/(1+theta[i])
}
exp <- mean(phi)
var <- var(phi)
postive <- 0
for (i in c(1:100000)){
if (phi[i]>0){
postive <- postive+1
}}
prob <- postive/100000
sort <- sort(phi)
print(sort[2500])
print(sort[97500])
plot(c(1:100000),sort)
length(sort)
install.packages("ggplot2")
library("ggplot2")
install.packages("nycflights13")
library(nycflights13)
head(flights, n=3)
Alaska <- flights[flights$carrier == "AS", ]
dim(Alask)
dim(Alaska)
data <- read.csv('wine.data.csv')
setwd("C:/Users/朱境怡/Desktop/DMML")
data <- read.csv('wine.data.csv')
wine <- read.csv('wine.data.csv')
wine <- read.csv("wine.data.csv")
wine.new<-wine[-122,-1]
wine.pca<-princomp(wine.new, cor=T)
summary(wine.pca)
wine.pca$sdev
wine.pca$sdev^2
wine <- read.csv("group_3.csv")
movie <- read.csv("group_3.csv")
View(movie)
data <- read.csv("group_3.csv")
### 数据预处理
## 查看数据概览
str(data)
summary(data)
##？？？？查看缺失值：结论是没有缺失值
#（好抽象这里，我明明在excel里看到缺失值了，可能这个代码有点问题）
colSums(is.na(data))
View(wine.pca)
View(data)
data <- read.csv("group_3.csv",na.strings = c('','NA'))
##？？？？查看缺失值：结论是没有缺失值
#（好抽象这里，我明明在excel里看到缺失值了，可能这个代码有点问题）
colSums(is.na(data))
## 检查重复行
duplicates <- duplicated(data)
num_duplicates <- sum(duplicates)
duplicates
num_duplicates
#删掉重复
data <- na.omit(data)
##异常值处理
#duration：Heaven's Gate 这个我不确定是不是错误的
##数据转换
#分类变量处理：转换为因子类型（color、language、country、和content_rating）
data$color <- as.factor(data$color)
data$language <- as.factor(data$language)
data$country <- as.factor(data$country)
data$content_rating <- as.factor(data$content_rating)
str(data[, c("color", "language", "country", "content_rating")])
#分割字段：plot_keywords和genres
keywords_list <- strsplit(data$plot_keywords, split = "\\|")
View(keywords_list)
genres_list <- strsplit(data$genres, split = "\\|")
##变量移除：movie_imdb_link，facenumber_in_poster 这俩感觉没什么意义
data$movie_imdb_link <- NULL
data$facenumber_in_poster <- NULL
##变量增加 增加利润率
data$profit_margin <- (data$gross - data$budget) / data$budget
###探索性分析
library(ggplot2)
library(tidyr)
library(dplyr)
##数据整体分析
#1 体裁分布：得到数量最多的几种类型
genres_vector <- unlist(genres_list)
genres_frequency <- table(genres_vector)
genres_frequency_sorted <- sort(genres_frequency, decreasing = TRUE)
genres_frequency_sorted
#2 电影时长分布
breaks <- c(0, 60, 90, 120, 150, 180, Inf)
duration_intervals <- cut(data$duration, breaks, right = FALSE,
labels = c("<1 hour", "1-1.5 hours", "1.5-2 hours", "2-2.5 hours", "2.5-3 hours", ">3 hours"))
duration_distribution <- table(duration_intervals)
print(duration_distribution)
duration_data <- as.data.frame(duration_distribution)
names(duration_data) <- c("Duration", "Count")
ggplot(duration_data, aes(x = Duration, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Distribution of Movie Durations", x = "Duration Intervals", y = "Number of Movies")
#3 color,language,country 会发现至少color和language的区分度很低，所以后期变量应该不选择它们
color_table <- table(data$color)
pie(color_table, main = "Color Distribution", col = rainbow(length(color_table)))
language_table <- table(data$language)
pie(language_table, main = "Language Distribution", col = rainbow(length(language_table)))
country_table <- table(data$country)
pie(country_table, main = "Country Distribution", col = rainbow(length(country_table)))
#4 content_rating
content_frequency <- table(content_rating)
#4 content_rating
content_frequency <- table(data$content_rating)
content_frequency_sorted <- sort(content_frequency, decreasing = TRUE)
content_frequency_sorted
content_data <- as.data.frame(content_frequency_sorted)
names(duration_data) <- c("Content_rating", "Count")
ggplot(duration_data, aes(x = Content_rating, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Distribution of Content rating", x = "Content rating", y = "Number of Movies")
content_data <- as.data.frame(content_frequency_sorted)
names(content_data) <- c("Content_rating", "Count")
ggplot(content_data, aes(x = Content_rating, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Distribution of Content rating", x = "Content rating", y = "Number of Movies")
#5 aspect_ratio
aspect_frequency <- table(data$aspect_ratio)
aspect_frequency_sorted <- sort(aspect_frequency, decreasing = TRUE)
aspect_frequency_sorted
##关系分析
#1 体裁随时间的变化情况 （表示某种时代潮流相关的因素？
data$genres_list <- strsplit(as.character(data$genres), "\\|")
data_expanded <- unnest(data, cols = c(genres_list))
data_selected <- data_expanded[c("title_year", "genres_list")]
year_genre_counts <- aggregate(cbind(count = data_selected$genres_list) ~ title_year + data_selected$genres_list, data = data_selected, FUN = length)
names(year_genre_counts) <- c("title_year", "genres", "count")
filtered_data <- year_genre_counts[FALSE,]
selected_genres <- c("Drama", "Comedy", "Thriller", "Romance", "Action" ,"Adventure","Crime","Fantasy","Family","Sci-Fi","Horror")
for(genre in selected_genres) {
genre_data <- subset(year_genre_counts, grepl(genre, genres))
filtered_data <- rbind(filtered_data, genre_data)
}
ggplot(filtered_data, aes(x = title_year, y = count, color = genres)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = "Trends in Movie Genres Over Years",
x = "Year",
y = "Number of Movies",
color = "Genre") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#2 受欢迎度（评分？）
#2-1 体裁与评分的关系
ggplot(data_expanded, aes(x = genres_list, y = imdb_score)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # 旋转X轴标签以提高可读性
labs(title = "IMDb Score by Movie Genre", x = "Genre", y = "IMDb Score")
#3 收入情况（净收入和利润率）这里应该还要做一个相关分析 但是影响力指标没出来所以没做
#3-1 体裁与平均利润率的关系（这里有两个很突出，可能要分析原因，看是不是某一部电影导致的
average_profit_by_genre <- aggregate(profit_margin ~ genres_list, data = data_expanded, FUN = mean, na.rm = TRUE)
average_profit_by_genre <- average_profit_by_genre[order(-average_profit_by_genre$profit_margin), ]
ggplot(average_profit_by_genre, aes(x = genres_list, y = profit_margin)) +
geom_line(aes(group = 1), color = "blue") +
geom_point(color = "red") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Average Profit Margin by Movie Genre", x = "Genre", y = "Average Profit Margin")
View(average_profit_by_genre)
Bio_and_doc <-average_profit_by_genre[average_profit_by_genre$genres_list==Biography]
Bio_and_doc <-average_profit_by_genre[average_profit_by_genre$genres_list=='Biography']
View(Bio_and_doc)
Bio_and_doc <-average_profit_by_genre[average_profit_by_genre$genres_list %in% c('Biography','
Documentary'),]
View(Bio_and_doc)
Bio_and_doc <-average_profit_by_genre[average_profit_by_genre$genres_list == c('Biography','
Documentary'),]
Bio_and_doc <-average_profit_by_genre[average_profit_by_genre$genres_list == 'Biography',]
View(Bio_and_doc)
View(data_expanded)
Bio_and_doc <-data_expanded[data_expanded$genres_list == 'Biography',c('profit_margin','genres_list')]
View(Bio_and_doc)
Bio_and_doc <-data_expanded[data_expanded$genres_list == 'Biography'&'
Documentary',c('profit_margin','genres_list')]
Bio_and_doc <-data_expanded[data_expanded$genres_list == 'Biography'&data_expanded$genres_list =='
Documentary',c('profit_margin','genres_list')]
View(Bio_and_doc)
Bio_and_doc <-data_expanded[data_expanded$genres_list %in% c('Biography','
Documentary'),c('profit_margin','genres_list')]
View(Bio_and_doc)
Bio_and_doc <-data_expanded[data_expanded$genres_list == 'Biography'|data_expanded$genres_list == '
Documentary',c('profit_margin','genres_list')]
View(Bio_and_doc)
View(Bio_and_doc)
Bio_and_doc <-data_expanded[data_expanded$genres_list == 'Biography'|'Documentary',c('profit_margin','genres_list')]
View(data_expanded)
Bio_and_doc <-data_expanded[data_expanded$genres_list == 'Biography'|data_expanded$genres_list=='Documentary',c('profit_margin','genres_list')]
View(Bio_and_doc)
ggplot(data=Bio_and_doc, aes(x= genres_list, y = profit_margin, fill=genres_list))+
geom_boxplot()+
labs=(x='Genres list',y='profit margin')
ggplot(data=Bio_and_doc, aes(x= genres_list, y = profit_margin, fill=genres_list))+
geom_boxplot()+
labs(x='Genres list', y='profit margin')
#2.35和1.85的最多，感觉不需要加入分析里面，或者看一眼是否和成功有关系？
plot(x=aspect_ratio,y=imdb_score, data=data)
#2.35和1.85的最多，感觉不需要加入分析里面，或者看一眼是否和成功有关系？
plot(x='aspect_ratio',y='imdb_score', data=data)
#2.35和1.85的最多，感觉不需要加入分析里面，或者看一眼是否和成功有关系？
plot(x=data$aspect_ratio,y=data$imdb_score)
# Load packages
library(MASS)
library(tidyverse)
library(psych)
library(jtools)
library(stats)
library(graphics)
library(ggplot2)
library(patchwork)
library(dplyr)
library(skimr)
library(knitr)
library(kableExtra)
# Upload the dataset02 and rename it as "data"
data <- read.csv("dataset02.csv")
setwd("D:/GitHub/DAS-Group-02")
# Upload the dataset02 and rename it as "data"
data <- read.csv("dataset02.csv")
glimpse(data)
View(data)
# View outcome variables
ggplot(data, aes(Total.Number.of.Family.members)) +
geom_histogram()
